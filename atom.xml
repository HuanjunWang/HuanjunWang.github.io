<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Echo&#39;s Blog</title>
  
  <subtitle>Coding and Reading</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanghuanjun.github.io/"/>
  <updated>2017-12-19T02:20:48.808Z</updated>
  <id>http://wanghuanjun.github.io/</id>
  
  <author>
    <name>Echo Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-math介绍</title>
    <link href="http://wanghuanjun.github.io/2017/12/18/Math-test/"/>
    <id>http://wanghuanjun.github.io/2017/12/18/Math-test/</id>
    <published>2017-12-18T06:36:23.000Z</published>
    <updated>2017-12-19T02:20:48.808Z</updated>
    
    <content type="html"><![CDATA[<p>mathjax 是一个javascript写的渲染数学公式的引擎<br><a href="https://www.mathjax.org/" target="_blank" rel="noopener">https://www.mathjax.org/</a><br>在hexo中安装 hexo-math插件可以支持mathjax<br><a href="https://github.com/hexojs/hexo-math" target="_blank" rel="noopener">https://github.com/hexojs/hexo-math</a><br><a id="more"></a><br>Mathjax tex support<br><a href="http://docs.mathjax.org/en/latest/tex.html#" target="_blank" rel="noopener">http://docs.mathjax.org/en/latest/tex.html#</a><br>LaTeX语法中文教程<br><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">https://www.zybuluo.com/knight/note/96093</a><br>makedown 表格生成器<br><a href="https://www.tablesgenerator.com/markdown_tables" target="_blank" rel="noopener">https://www.tablesgenerator.com/markdown_tables</a></p><h4 id="hexo-math-安装"><a href="#hexo-math-安装" class="headerlink" title="hexo-math 安装"></a>hexo-math 安装</h4><p>hexo-math最新版本安装非常简单，只有在blog的根目录下运行<br>    npm install hexo-math —save </p><p>在new post头加上下面一行即可<br>    mathjax: true</p><p>如果没有效果，可以修改 node_modules\hexo-math\lib\option.js</p><pre><code>mathjax: {     src: &quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;,</code></pre><h4 id="hexo-math工作原理"><a href="#hexo-math工作原理" class="headerlink" title="hexo-math工作原理"></a>hexo-math工作原理</h4><p>hexo-math 检查mathjax是否置为true,如果没有则不对改post进行操作。如果mathjax置为true，hexo将math tag转化为 mathjax能识别的格式 然后将 node_modules\hexo-math\lib\option.js 关于mathjax的config append到该pose生成的html里面。<br>而Mathjax.js则会对html里面的数学公式进行渲染。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code>$ \boldsymbol{x} \rm x  \it x \bf x \cal x \sl x \sf x \mit x \tt x  \sc x $ </code></pre><p>$ \boldsymbol{x} \rm x  \it x \bf x \cal x \sl x \sf x \mit x \tt x  \sc x $</p><pre><code>Simple inline $a = b + c$.</code></pre><p>Simple inline $a = b + c$.</p><pre><code>$$\frac{\partial u}{\partial t}= h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2} +\frac{\partial^2 u}{\partial z^2}\right)$$</code></pre><script type="math/tex; mode=display">\frac{\partial u}{\partial t}= h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2} +\frac{\partial^2 u}{\partial z^2}\right)</script><pre><code>This equation {% math %}\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1 {% endmath %} is inline.</code></pre><p>This equation <span>$\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1$</span><!-- Has MathJax --> is inline.</p><pre><code>{% math %}\begin{aligned}\dot{x} & = \sigma(y-x) \\\dot{y} & = \rho x - y - xz \\\dot{z} & = -\beta z + xy\end{aligned}{% endmath %}</code></pre><span>$$\begin{aligned}\dot{x} &amp; = \sigma(y-x) \\\dot{y} &amp; = \rho x - y - xz \\\dot{z} &amp; = -\beta z + xy\end{aligned}$$</span><!-- Has MathJax -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mathjax 是一个javascript写的渲染数学公式的引擎&lt;br&gt;&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.mathjax.org/&lt;/a&gt;&lt;br&gt;在hexo中安装 hexo-math插件可以支持mathjax&lt;br&gt;&lt;a href=&quot;https://github.com/hexojs/hexo-math&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hexojs/hexo-math&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wanghuanjun.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wanghuanjun.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>误差逆传播算法BP</title>
    <link href="http://wanghuanjun.github.io/2017/12/18/error-back-propagation/"/>
    <id>http://wanghuanjun.github.io/2017/12/18/error-back-propagation/</id>
    <published>2017-12-18T01:20:49.000Z</published>
    <updated>2017-12-20T05:38:44.558Z</updated>
    
    <content type="html"><![CDATA[<p>误差拟传播算法(Error BackPropagation 简称BP)，是最成功的神经网络学习算法。BP网络通常指用误差逆传播算法训练的前馈神经网络。BP算法基于梯度下降策略，以目标的负梯度方向对参数进行调整。<br><a id="more"></a></p><h4 id="M-P神经元训练"><a href="#M-P神经元训练" class="headerlink" title="M-P神经元训练"></a>M-P神经元训练</h4><p>以最简单的M-P神经元模型为例，来解释下BP算法。</p><p>如下表数据，输入向量$ \boldsymbol x $  有三个属性，输出标量 $y$</p><div class="table-container"><table><thead><tr><th>$x1$</th><th>$x2$</th><th>$x3$</th><th>$y $</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td></tr></tbody></table></div><p>下面我们使用M-P神经元来拟合上面的数据<br><img src="http://img.blog.csdn.net/20160414173648227" alt="M-P神经元"><br>该神经元接收的输入为 <span>$x_1, x_2, x_3$</span><!-- Has MathJax -->, 输入的权重分别为 <span>$w_1, w_2, w_3$</span><!-- Has MathJax -->。 $ f $ 取常用的sigmoid 函数, 即 $ f(z) = \frac {1}{ 1 - {\rm e}^{-z}}  $ , 将$ z = \sum_{i=1}^3 w_i x_i - \theta $ 带入得：</p><p>公式1：<br><span>$y = \frac {1}{ 1 - {\rm e}^{-{(\sum_{i=1}^3 w_i x_i - \theta)}}}$</span><!-- Has MathJax --></p><p>对于给定的$ \boldsymbol x $， 我们根据公式1可以求出 $ y $的估计值 $ \hat{y} $。 我可以通过调整公式1中的 $ w, \theta $来最小化真实值$ y $与估计值 $ \hat{y} $之间的差距。 我们选取均方误差来度量这个差距，为了之后求导方便，我们取均方误差的等价形式，如下<br>公式2<br>$ E = \frac {1} {2} (\hat{y} - y) ^ 2 $</p><p>此例中，我们的目标是拟合样本数据，不涉及泛华，使用我们实际要到达的目标是(n 为样本总数) <span>$\sum_{1}^{n} E$</span><!-- Has MathJax --> 的最小化</p><p>为了时损失函数到达最小，我们在负梯度方向来更新参数$\boldsymbol w 和 \theta$, 取学习率为 $\eta$,则 $ w_j (j = 1,2,3) $ 的更新步长为<br><span>$\Delta w_j = - \eta \frac {\partial E} {\partial w_j}$</span><!-- Has MathJax --><br>利用链式法则求导得：<br><span>$\Delta w_j = - \eta \hat{y} (1 - \hat{y}) (\hat{y} - y) x_j 即 \Delta w_j =  \eta \hat{y} (1 - \hat{y}) (y - \hat{y}) x_j$</span><!-- Has MathJax --><br>$\theta$的更新步长为:<br><span>$\Delta \theta = - \eta \frac {\partial E} {\partial \theta}$</span><!-- Has MathJax --><br>利用链式法则求导得：<br><span>$\Delta \theta = \eta \hat{y} (1 - \hat{y}) (\hat{y} - y)  即  \Delta \theta = - \eta \hat{y} (1 - \hat{y}) (y - \hat{y})$</span><!-- Has MathJax --></p><p>如下，我们采用累积误差而不是标准误差，这样可以减少参数更新次数</p><pre><code>def BP(X, y, eta, loop=1000, step=10):    w = init_parameter((X.shape[1], 1))    theta = init_parameter((1, 1))    for iter in xrange(loop):        l0 = X  # 4 x 3        l1 = sigmoid(np.dot(l0, w) - theta)  # 4 x 1        delta_w = np.dot(X.T, eta * l1 * (1 - l1) * (y - l1))  # 3 * 1        delta_theta = np.sum(-eta * l1 * (1 - l1) * (y - l1))        w += delta_w        theta += delta_theta</code></pre><p>收敛结果如下，eta 代表学习率 $ \eta $<br><img src="/content/images/BP.jpg" alt="img"></p><h4 id="单隐层前馈神经网络"><a href="#单隐层前馈神经网络" class="headerlink" title="单隐层前馈神经网络"></a>单隐层前馈神经网络</h4><p>如果将样本数据改为如下， $ y $ 表示 $ x_1 $ $x_2$的异或。</p><div class="table-container"><table><thead><tr><th>$x1$</th><th>$x2$</th><th>$x3$</th><th>$y $</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td></tr></tbody></table></div><p>异或不是线性可分的，用之前的感知机不能拟合，使用可以增加隐层来提高模型的拟合能力。</p><span>$$\Delta w_j =  \eta \hat{y} (1 - \hat{y}) (y - \hat{y}) b_j \\\Delta \theta = - \eta \hat{y} (1 - \hat{y}) (y - \hat{y}) \\\Delta v_{ih} = \eta e_h x_i \\\Delta \gamma_h= - \eta e_h \\e_h = b_h(1-b_h)w_h\hat{y} (1 - \hat{y}) (y - \hat{y})$$</span><!-- Has MathJax --><pre><code>def BP(X, y, eta, loop=10000, step=10):    input_n = X.shape[1]    output_n = 1    w = init_parameter((input_n + 2, 1))  # 5 x 1    theta = init_parameter((1, 1))  # 1 x 1    gamma = init_parameter((input_n + 2, 1))  # 5 x 1    v = init_parameter((input_n, input_n + 2))  # 3 x 5    for iter in xrange(loop):        l0 = X  # 4 x 3        l1 = sigmoid(np.dot(l0, v) - gamma.T)  # 4 x 5        l2 = sigmoid(np.dot(l1, w) - theta.T)  # 4 x 1        delta_w = eta * np.dot(l1.T, l2 * (1 - l2) * (y - l2))  # 5 x 1        delta_theta = -eta * np.sum(l2 * (1 - l2) * (y - l2))  # 1 x 1        delta_v = eta * np.dot(l0.T, ((l1 * (1 - l1)).T * w).T * l2 * (1 - l2) * (y - l2))        delta_gamma = -eta * np.dot((l1 * (1 - l1)).T * w, l2 * (1 - l2) * (y - l2))        w += delta_w        theta += delta_theta        v += delta_v        gamma += delta_gamma</code></pre><p>收敛结果如下，eta 代表学习率 $ \eta $<br><img src="/content/images/BP2.jpg" alt="img"></p><h4 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h4><p>可以总结为，前向传播求损失，反向传播更新参数。<br>BP算法先将输入示例提供给输入层神经元，然后逐层前传，直到得到输出层的输出结果。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><a href="https://github.com/HuanjunWang/MLExample/blob/master/NeuralNetwork/BP.py" target="_blank" rel="noopener">https://github.com/HuanjunWang/MLExample/blob/master/NeuralNetwork/BP.py</a><br><a href="https://github.com/HuanjunWang/MLExample/blob/master/NeuralNetwork/BP2.py" target="_blank" rel="noopener">https://github.com/HuanjunWang/MLExample/blob/master/NeuralNetwork/BP2.py</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.csdn.net/taoyanqi8932/article/details/54575405" target="_blank" rel="noopener">http://blog.csdn.net/taoyanqi8932/article/details/54575405</a><br>周志华《<a href="https://item.jd.com/11867803.html" target="_blank" rel="noopener">机器学习</a>》5.3 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;误差拟传播算法(Error BackPropagation 简称BP)，是最成功的神经网络学习算法。BP网络通常指用误差逆传播算法训练的前馈神经网络。BP算法基于梯度下降策略，以目标的负梯度方向对参数进行调整。&lt;br&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://wanghuanjun.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://wanghuanjun.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 初始值问题</title>
    <link href="http://wanghuanjun.github.io/2017/12/13/JAVA-Init-Value/"/>
    <id>http://wanghuanjun.github.io/2017/12/13/JAVA-Init-Value/</id>
    <published>2017-12-13T06:31:52.000Z</published>
    <updated>2017-12-14T02:31:39.550Z</updated>
    
    <content type="html"><![CDATA[<p>从C/C++转过来做JAVA的程序员一般会不自觉的关心变量的初始值问题，其实JAVA由于编译器的保护，初始值问题并没有C/C++那么突出。这里对初始值问题稍作分析。<br>JAVA的对象实质上是一块内存和操作这块一些函数。内存来维护对象的状态，这些状态在对象的生命周期中可能会改变。对象变量的初始值决定了对象的初始状态。<br><a id="more"></a></p><h4 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h4><p>函数内的局部变量，如果没有初始化就使用，编译器直接报错，使用这类问题不会引起什么后果。</p><pre><code>Error:(xx, xx) java: variable xxxx might not have been initialized</code></pre><h4 id="对象的成员变量"><a href="#对象的成员变量" class="headerlink" title="对象的成员变量"></a>对象的成员变量</h4><blockquote><p>默认初始值</p></blockquote><p>如果对象的成员变量没有通过任何方法初始化，在new出对象的时候，这些变量根据不同类型将会得到不同初始值.<br>boolean 会得到 false, byte, short, int, char, float, doubld 会得到各自类型的0， object reference 会得到 null。</p><blockquote><p>构造函数</p></blockquote><p>每一个类至少要有一个构造函数，如果没有声明任何构造函数，编译器则会自动创建一个默认的构造函数，默认构造函数时一个没有参数且函数体为空。<br>构造函数可以通过参数不同来实现重载。</p><blockquote><p>初始化器</p></blockquote><p>可以在声明变量的时候，给变量一个初始值。使用这种初始化方式时，可以引用已经声明的变量来初始化当前变量，但是不能前向引用</p><pre><code>//OKprivate int a = 10;private int b = a;//Errorprivate int c = d;private int d = 10;</code></pre><p>初始化器的另外一种形式时初始化块，可以在类里面定义任意块初始化块，初始化块会按照从前到后的顺序执行。初始化块可以处理异常，在有多个重载的构造函数时，可以用它来初始化各构造函数无差异的部分。</p><h4 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h4><p>默认初始值 -&gt; 声明时的初始化 -&gt; 初始化块（从前到后） -&gt;  构造函数</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.javaworld.com/article/2076614/core-java/object-initialization-in-java.html" target="_blank" rel="noopener">https://www.javaworld.com/article/2076614/core-java/object-initialization-in-java.html</a></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><a href="https://github.com/HuanjunWang/JavaLearning/blob/master/src/Initialization.java" target="_blank" rel="noopener">https://github.com/HuanjunWang/JavaLearning/blob/master/src/Initialization.java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从C/C++转过来做JAVA的程序员一般会不自觉的关心变量的初始值问题，其实JAVA由于编译器的保护，初始值问题并没有C/C++那么突出。这里对初始值问题稍作分析。&lt;br&gt;JAVA的对象实质上是一块内存和操作这块一些函数。内存来维护对象的状态，这些状态在对象的生命周期中可能会改变。对象变量的初始值决定了对象的初始状态。&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://wanghuanjun.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://wanghuanjun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://wanghuanjun.github.io/2017/12/12/Black-Red-Tree/"/>
    <id>http://wanghuanjun.github.io/2017/12/12/Black-Red-Tree/</id>
    <published>2017-12-12T08:20:03.000Z</published>
    <updated>2017-12-15T08:05:28.010Z</updated>
    
    <content type="html"><![CDATA[<p>红黑树和AVL Tree一样，都属于自平衡二叉查找树。红黑树有如下特点</p><ol><li>每个节点都为红色或者黑色</li><li>根节点为黑色</li><li>红色节点的父节点和子节点不能为红色</li><li>从根到叶的所有路径，黑色节点数相同</li></ol><a id="more"></a><h4 id="对比-AVLTree"><a href="#对比-AVLTree" class="headerlink" title="对比 AVLTree"></a>对比 AVLTree</h4><p>AVLTree 拥有更高的平衡性，但是为了维护其平衡性，在插入和删除时便需要做更多的旋转。如果实际中插入和删除的操作比较频繁，那么使用红黑树就优于AVL Tree，反之，如果插入删除不是特别频繁，AVL Tree则更好，因为它的查询性能优于红黑树。</p><h4 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h4><p>红黑树从根到页的所有路径中，最长路径不大于最短路径的2倍。因为使用路径的黑色节点数相同，而红色不能相邻，所以极端情况下一条路径全是黑色，一条路径红黑相间，最长路径为最短路径的两倍。</p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ol><li>先按照标准二叉查找树的方法插入新节点，并把新节点标为红色。</li><li>如果新节点为根节点，则把新节点变为黑色。</li><li><p>如果新节点的父节点是红色，则需要通过颜色变更和树旋转来恢复红黑树。<br>3.1 颜色变更<br>如果新节点的叔节点也为红色，则可以通过颜色变更来恢复红黑树。<br>将新节点的父节点叔节点变为黑色，祖父节点变为红色。根据祖父节点的情况再进行颜色变更或旋转。<br>3.2 旋转<br>如果新节点的叔节点为黑色或者为空，则可以通过旋转来恢复红黑树。旋转类似AVL Tree,分四种情况</p><pre><code> 旋转之前先更新与祖先节点的联系</code></pre></li></ol><ul><li><p><strong>左左</strong><br>父节点是祖父节点的左子节点， 新节点时父节点的左子节点<br>需要一次右旋转，并且改变祖父，父节点的颜色。<br><img src="http://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3a1.png" alt="右旋示意图"></p></li><li><p><strong>左右</strong><br>父节点是祖父节点的左子节点， 新节点时父节点的右子节点<br>需要先左旋，再右旋， 并且改变新节点和祖父节点的颜色<br><img src="http://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3b.png" alt="右旋左旋示意图"></p></li><li><p><strong>右右</strong><br>父节点是祖父节点的右子节点， 新节点时父节点的右子节点<br>需要一次左旋转， 并且改变祖父，父节点的颜色<br><img src="http://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png" alt="左旋示意图"></p></li><li><p><strong>右左</strong><br>父节点是祖父节点的右子节点， 新节点时父节点的左子节点<br>需要先右旋，再左旋， 并且改变新节点和祖父节点的颜色<br><img src="http://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3d.png" alt="左旋右旋示意图"></p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.geeksforgeeks.org/red-black-tree-set-2-insert/" target="_blank" rel="noopener">http://www.geeksforgeeks.org/red-black-tree-set-2-insert/</a></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><a href="https://github.com/HuanjunWang/JavaLearning/blob/master/src/RedBlackTree.java" target="_blank" rel="noopener">https://github.com/HuanjunWang/JavaLearning/blob/master/src/RedBlackTree.java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;红黑树和AVL Tree一样，都属于自平衡二叉查找树。红黑树有如下特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个节点都为红色或者黑色&lt;/li&gt;
&lt;li&gt;根节点为黑色&lt;/li&gt;
&lt;li&gt;红色节点的父节点和子节点不能为红色&lt;/li&gt;
&lt;li&gt;从根到叶的所有路径，黑色节点数相同&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://wanghuanjun.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="BST" scheme="http://wanghuanjun.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>AVL 树</title>
    <link href="http://wanghuanjun.github.io/2017/12/12/AVL-Tree/"/>
    <id>http://wanghuanjun.github.io/2017/12/12/AVL-Tree/</id>
    <published>2017-12-12T07:04:03.000Z</published>
    <updated>2017-12-15T02:38:01.900Z</updated>
    
    <content type="html"><![CDATA[<p>AVL Tree 是一种自平衡二叉查找树。<br>首先它是一棵二叉查找树（Binary Search Tree)，二叉查找树满足左子树所有节点小于当前节点，右子树所有节点大于当前节点，中序遍历二叉查找树会得到一个从小到大的有序序列。二叉查找树查找的时间复杂度平均为O(log n)，最坏情况下，树退化为一个链表时，查找的时间复杂度为O(n)。<br>可以通过维持树的平衡性来防止时间复杂度的退化。AVL Tree通过旋转来维持树的平衡性，从而实现最坏情况下查询的复杂度仍为O(log n)。<br><a id="more"></a><br>AVL Tree 满足其中任一节点的左右子树的高度差不大于1。查找操作不会对树的平衡造成任何影响。参入和删除则可能影响熟的平衡性。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><a href="https://github.com/HuanjunWang/JavaLearning/blob/master/src/AVLTree.java" target="_blank" rel="noopener">https://github.com/HuanjunWang/JavaLearning/blob/master/src/AVLTree.java</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.geeksforgeeks.org/avl-tree-set-1-insertion/" target="_blank" rel="noopener">http://www.geeksforgeeks.org/avl-tree-set-1-insertion/</a><br><a href="http://www.geeksforgeeks.org/avl-tree-set-2-deletion/" target="_blank" rel="noopener">http://www.geeksforgeeks.org/avl-tree-set-2-deletion/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AVL Tree 是一种自平衡二叉查找树。&lt;br&gt;首先它是一棵二叉查找树（Binary Search Tree)，二叉查找树满足左子树所有节点小于当前节点，右子树所有节点大于当前节点，中序遍历二叉查找树会得到一个从小到大的有序序列。二叉查找树查找的时间复杂度平均为O(log n)，最坏情况下，树退化为一个链表时，查找的时间复杂度为O(n)。&lt;br&gt;可以通过维持树的平衡性来防止时间复杂度的退化。AVL Tree通过旋转来维持树的平衡性，从而实现最坏情况下查询的复杂度仍为O(log n)。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://wanghuanjun.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="BST" scheme="http://wanghuanjun.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://wanghuanjun.github.io/2017/12/12/hello-world/"/>
    <id>http://wanghuanjun.github.io/2017/12/12/hello-world/</id>
    <published>2017-12-12T02:57:13.969Z</published>
    <updated>2017-12-18T08:52:31.831Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><a href="https://yanyinhong.github.io/2017/05/01/How-to-build-blog-with-hexo-and-github/" target="_blank" rel="noopener">Hexo setup Guide</a><br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="noopener">Hexo Theme</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wanghuanjun.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wanghuanjun.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
